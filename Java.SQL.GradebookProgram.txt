import java.sql.*;
import java.util.*;

//@author: Anthony Grant

public class Assignment6 {
    static Statement statement = null;
    static ArrayList<Student> studentList = new ArrayList<Student>();

    /**
     * Main method to run program. The program connects to a database and using SQL updates,
     * deletes or does whatever the user asks the program to do directly to a database. This database
     * is for a student gradebook. 
     */

    public static final void main(String[] args) {
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
        } catch (ClassNotFoundException cnfe) {
            System.out.println("Unable to load MySQL Driver");
            System.exit(0);
        } catch (InstantiationException ie) {
        } catch (IllegalAccessException iae) {}

        Connection connection = null;

        try {
            connection = DriverManager.getConnection("jdbc:mysql://techsql/crista?user=cbusse&password=0145507");
        } catch (SQLException sqle) {
            sqle.printStackTrace(System.err);
            System.exit(0);
        }

        int choice;

        try {
            statement = connection.createStatement();
            ResultSet rs = statement.executeQuery("SELECT * FROM students");
            Student s;
            while(rs.next()) {
                s = new Student(Integer.parseInt(rs.getString(1)), rs.getString(3), rs.getString(2));
                studentList.add(s);
            }
            do {
                printMenu();
                choice = KeyboardReader.readInt();
                switch (choice) {
                    case 1:
                        createStudent();
                        choice = 0;
                        break;
                    case 2:
                        System.out.print("Please enter the assignment number for which you would like to add grades: ");
                        int number = KeyboardReader.readInt();
                        addGrade(number);
                        choice = 0;
                        break;
                    case 3:
                        listStudents();

                        System.out.print("Please select the ID number of the student whose grade you need to edit: ");
                        int id = KeyboardReader.readInt();

                        listGradesForStudent(id);

                        System.out.print("Please select the assignment number you need to edit: ");
                        int assignNum = KeyboardReader.readInt();

                        System.out.print("Please enter the new grade: ");
                        char grade = Character.toUpperCase(KeyboardReader.readChar());

                        updateGrade(id, assignNum, grade);

                        listGradesForStudent(id);
                        choice = 0;
                        break;
                    case 4:
                        System.out.print("Enter the assignment for which you would like to see the grades: ");
                        int aNum = KeyboardReader.readInt();
                        listGradesForAssignment(aNum);
                        choice = 0;
                        break;
                    case 5:
                        break;
                    default:
                        System.out.println("Invalid selection.");
                        choice = 0;
                        break;
                }
            } while(choice != 5);
        } catch (SQLException sqle) {
            sqle.printStackTrace(System.err);
        } finally {
            try {
                statement.close();
            } catch (Exception e) {}
            try {
                connection.close();
            } catch (Exception e) {}
        }
    }

    /**
     * Creates a new student and inserts them into the students table.
     * 
     */

    public static void createStudent() {
        System.out.print("Please enter the student's first name: ");
        String fName = KeyboardReader.readLine();
        System.out.print("Please enter the student's last name: ");
        String lName = KeyboardReader.readLine();

        try {
            statement.executeUpdate("INSERT INTO students (LAST_NAME, FIRST_NAME) VALUES ('" + lName + "', '" + fName +"')", Statement.RETURN_GENERATED_KEYS);
            ResultSet generatedKeys = statement.getGeneratedKeys();
            Student s = null;
            while(generatedKeys.next()) {
                int newID = Integer.parseInt(generatedKeys.getString(1));
                s = new Student(newID, fName, lName);
            }
            generatedKeys.close();
            studentList.add(s);
            listStudents();
        } catch (SQLException sqle) {
            System.out.println(fName + " " + lName + " could not be added to the database.");
            sqle.printStackTrace(System.err);
        }
    }

    /**
     * Adds grades into the grades table for an assignment to each student in the students table. 
     * 
     * @param   assignment    An int value representing the assignment number.
     * 
     */

    public static void addGrade(int assignment) {
        int numChanges = 0;
        try {
            for (Student s : studentList) {
                System.out.print("Please enter " + s.getFirstName() + " " + s.getLastName() + "'s grade for assignment " + assignment + ": ");
                char grade = Character.toUpperCase(KeyboardReader.readChar());
                statement.executeUpdate("INSERT INTO grades (ID, ASSIGNMENT, GRADE) VALUES ('" + s.getID() + "', '" + assignment + "', '" + grade + "')");
                numChanges++;
            }
        } catch (SQLException sqle) {
            sqle.printStackTrace(System.err);
        }
    }

    /**
     * Lists the IDs and names for each student in the students table. 
     * 
     * 
     */

    public static void listStudents() {
        System.out.println("ID\tLAST NAME\tFIRST NAME");
        for (Student s : studentList) {
            System.out.println(s.getID() + "\t" + s.getFirstName() + "\t" + s.getLastName());
        }
    }

    /**
     * Lists all the grades in the grades table for each assignment for each student. 
     * 
     * 
     */

    public static void listGrades() {
        try {
            ResultSet rs = statement.executeQuery("SELECT * FROM grades");
            ResultSetMetaData metaData = rs.getMetaData();
            for (int i = 1; i <= metaData.getColumnCount(); i++) {
                System.out.print(metaData.getColumnLabel(i) + "\t");
            }
            System.out.println();
            while(rs.next()) {
                for(int i = 1; i <= metaData.getColumnCount(); i++) {
                    System.out.print(rs.getString(i) + "\t");
                }
                System.out.println();
            }
            rs.close();
        } catch (SQLException sqle) {
            sqle.printStackTrace(System.err);
        }
    }

    /**
     * Lists all the grades in the grades table for each assignment for a particular student. 
     * 
     * @param   studentID    An int value representing the student ID.
     * 
     */

    public static void listGradesForStudent(int studentID) {
        try {
            ResultSet rs = statement.executeQuery("SELECT * FROM grades WHERE ID='" + studentID + "'");
            ResultSetMetaData metaData = rs.getMetaData();
            for (int i = 1; i <= metaData.getColumnCount(); i++) {
                System.out.print(metaData.getColumnLabel(i) + "\t");
            }
            System.out.println();
            while(rs.next()) {
                for(int i = 1; i <= metaData.getColumnCount(); i++) {
                    System.out.print(rs.getString(i) + "\t");
                }
                System.out.println();
            }
            rs.close();
        } catch (SQLException sqle) {
            sqle.printStackTrace(System.err);
        }
    }

    /**
     * Lists all the grades in the grades table for a particular assignment for each student. 
     * 
     * @param   assignmentNum    An int value representing the assignment number.
     * 
     */

    public static void listGradesForAssignment(int assignmentNum) {
        try {
            ResultSet rs = statement.executeQuery("SELECT * FROM grades WHERE ASSIGNMENT='" + assignmentNum + "'");
            ResultSetMetaData metaData = rs.getMetaData();
            for (int i = 1; i <= metaData.getColumnCount(); i++) {
                System.out.print(metaData.getColumnLabel(i) + "\t");
            }
            System.out.println();
            while(rs.next()) {
                for(int i = 1; i <= metaData.getColumnCount(); i++) {
                    System.out.print(rs.getString(i) + "\t");
                }
                System.out.println();
            }
            rs.close();
        } catch (SQLException sqle) {
            sqle.printStackTrace(System.err);
        }
    }

    /**
     * Updates the grade in the grades table for a specific student's assignment. 
     * 
     * @param   studentID    An int value representing the student ID.
     * 
     * @param   assignmentNum   An int value representing the assignment number.
     * 
     * @param   grade   A char value of the grade that will be added to the grades table.
     * 
     */

    public static void updateGrade(int studentID, int assignmentNum, char grade) {
        try {
            int numChanges = statement.executeUpdate("UPDATE grades SET GRADE='" + grade + "' WHERE ID='" + studentID + "' AND ASSIGNMENT='" + assignmentNum + "'");
            System.out.println(numChanges + " grade updated.");
        } catch (SQLException sqle) {
            sqle.printStackTrace(System.err);
        }
    }

    /**
     * Prints the user menu to the console.
     *
     */

    public static void printMenu() {
        System.out.println();
        System.out.println("Select an item from the following menu");
        System.out.println("1) Create a new student");
        System.out.println("2) Add grades for an assignment");
        System.out.println("3) Change a grade for an assignment");
        System.out.println("4) View all grades for an assignment");
        System.out.println("5) Exit");
        System.out.println("*****************************************");
    }
}





/**
 * This class represents a student object. The student has an ID, 
 * first name, and last name. These variables are private but can be 
 * accessed with public getters and setters.
 * 
 * @author  Anthony Grant
 * @version %I%, %G%
 */

public class Student {
    private int id;
    private String firstName;
    private String lastName;

    /* 
     * Constructor.
     * 
     * @param   id  The student ID.
     * 
     * @param   firstName   The student's first name.
     * 
     * @param   lastName    The student's last name.
     * 
     */

    public Student(int id, String firstName, String lastName) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /**
     * Gets the student ID.
     * 
     * @return  the student ID.
     */
    
    public int getID() {
        return id;
    }

    /**
     * Sets the student ID.
     * 
     * @param  id   The student id number.
     */

    public void setID(int id) {
        this.id = id;
    }

    /**
     * Gets the student's first name.
     * 
     * @return  the student's first name.
     */

    public String getFirstName() {
        return firstName;
    }

    /**
     * Sets the student's first name.
     * 
     * @param  firstName   The student's first name.
     */

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    /**
     * Gets the student's last name.
     * 
     * @return  the student's last name.
     */

    public String getLastName() {
        return lastName;
    }

    /**
     * Sets the student's last name.
     * 
     * @param  lastName   The student's last name.
     */

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}




/**
 * A very basic keyboard reader class I created to expediate entering data
 * into a program
 * @author  Anthony Grant
 * @version %I%, %G%
 */

import java.io.*;
import java.lang.Integer.*;

public class KeyboardReader {

    private static BufferedReader in;
    static {
        in = new BufferedReader(new InputStreamReader(System.in));
    }

    public static final boolean readBoolean() {
        return Boolean.parseBoolean(readLine());
    }

    public static final byte readByte() {
        do {
            try {
                return Byte.parseByte(readLine());
            } catch (NumberFormatException nfe) {
                System.out.println("Invalid input. Please enter a byte.");
                System.out.print("(A byte is between " + Byte.MIN_VALUE + " and " + Byte.MAX_VALUE + "): ");
            }
        } while (true);
    }

    public static final char readChar() {
        do {
            try {
                return in.readLine().charAt(0);
            } catch (IOException ioe) {
                System.out.print("I'm here. Because you broke something. One character ONLY. PLease. : ");
            }
        } while (true);
    }

    public static final double readDouble() {
        do {
            try {
                return Double.parseDouble(readLine());
            } catch (NumberFormatException nfe) {
                System.out.print("Invalid input. Please enter a double: ");
            }
        } while (true);
    }

    public static final int readInt() {
        do {
            try {
                return Integer.parseInt(readLine());
            } catch (NumberFormatException nfe) {
                System.out.print("Invalid input. Please enter an integer: ");
            }
        } while (true);
    }

    public static final float readFloat() {
        do {
            try {
                return Float.parseFloat(readLine());
            } catch (NumberFormatException nfe) {
                System.out.print("Invalid input. Please enter a float value: ");
            }
        } while (true);
    }

    public static final java.lang.String readLine() {
        do {
            try {
                return in.readLine();
            } catch (IOException ioe) {
                System.out.println("I'm here. Because you broke something.");
            }
        } while (true);
    }

    public static final long readLong() {
        do {
            try {
                return Long.parseLong(readLine());
            } catch (NumberFormatException nfe) {
                System.out.print("Invalid input. Please enter an integer between " + Long.MIN_VALUE + " and " + Long.MAX_VALUE + ": ");
            }
        } while (true);
    }

    public static final short readShort() {
        do {
            try {
                return Short.parseShort(readLine());
            } catch (NumberFormatException nfe) {
                System.out.print("Invalid input. Please enter an integer between " + Short.MIN_VALUE + " and " + Short.MAX_VALUE + ": ");
            }
        } while (true);
    }

}